{"ast":null,"code":"var _jsxFileName = \"D:\\\\SAI DT\\\\Z444\\\\Z444pro\\\\src\\\\components\\\\ChatsList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\";\nimport { supabase } from \"../supabase\";\nimport { UserContext } from \"../contexts/UserContext\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport Swal from \"sweetalert2\";\nimport { Search, MessageCircle, Users, Plus, ArrowLeft } from \"lucide-react\";\nimport \"../styles/ChatsList.css\";\nimport ChatWindow from \"./ChatWindow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatsList() {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [activeChat, setActiveChat] = useState(null);\n  const [activeGroup, setActiveGroup] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [activeSection, setActiveSection] = useState(\"chats\");\n  const [isMobileView, setIsMobileView] = useState(window.innerWidth <= 768);\n  const [showChatWindow, setShowChatWindow] = useState(false);\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    isDarkMode,\n    theme\n  } = useContext(ThemeContext);\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const location = useLocation();\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobileView(window.innerWidth <= 768);\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  useEffect(() => {\n    if (location.state && location.state.activeGroup) {\n      setActiveGroup(location.state.activeGroup);\n      setActiveSection(\"groups\");\n    }\n  }, [location]);\n  useEffect(() => {\n    fetchChats();\n    fetchGroups();\n  }, []);\n  useEffect(() => {\n    if (id) {\n      setActiveChat(id);\n    }\n  }, [id]);\n  async function fetchChats() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(\"chat_conversations\").select(\"*\").or(`participant1_id.eq.${user.id},participant2_id.eq.${user.id}`).order(\"last_message_at\", {\n        ascending: false\n      });\n      if (error) throw error;\n      const chatsWithDetails = await Promise.all(data.map(async chat => {\n        const otherParticipantId = chat.participant1_id === user.id ? chat.participant2_id : chat.participant1_id;\n        const otherParticipantType = chat.participant1_id === user.id ? chat.participant2_type : chat.participant1_type;\n        const otherParticipantUsername = chat.participant1_id === user.id ? chat.participant2_username : chat.participant1_username;\n        const {\n          data: userData,\n          error: userError\n        } = await supabase.from(otherParticipantType === \"learner\" ? \"learnersDB\" : \"guidesDB\").select(\"name, image\").eq(\"id\", otherParticipantId).single();\n        if (userError) throw userError;\n        const lastMessage = chat.messages[chat.messages.length - 1];\n        return {\n          ...chat,\n          otherParticipantName: userData.name,\n          otherParticipantImage: userData.image,\n          otherParticipantId,\n          otherParticipantUsername,\n          lastMessage: lastMessage ? lastMessage.message : \"\",\n          lastMessageTime: lastMessage ? lastMessage.created_at : chat.last_message_at\n        };\n      }));\n      setChats(chatsWithDetails);\n    } catch (error) {\n      console.error(\"Error fetching chats:\", error);\n      Swal.fire(\"Error\", \"Failed to fetch chats. Please try again later.\", \"error\");\n    }\n  }\n  async function fetchGroups() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from(\"groups\").select(\"*\").order(\"created_at\", {\n        ascending: false\n      });\n      if (error) throw error;\n      const userGroups = data.filter(group => group.members.includes(user.id));\n      setGroups(userGroups);\n    } catch (error) {\n      console.error(\"Error fetching groups:\", error);\n      Swal.fire(\"Error\", \"Failed to fetch groups. Please try again later.\", \"error\");\n    }\n  }\n  const handleChatClick = async (otherParticipantId, otherParticipantUsername) => {\n    const conversationId = user.role === \"learner\" ? `${user.username}-${otherParticipantUsername}` : `${otherParticipantUsername}-${user.username}`;\n    const existingChat = chats.find(chat => chat.id === conversationId);\n    if (existingChat) {\n      setActiveChat(existingChat.id);\n      navigate(`/chats/${existingChat.id}`, {\n        replace: true\n      });\n    } else {\n      try {\n        const newChat = {\n          id: conversationId,\n          participant1_id: user.id,\n          participant2_id: otherParticipantId,\n          participant1_username: user.username,\n          participant2_username: otherParticipantUsername,\n          participant1_type: user.role,\n          participant2_type: user.role === \"learner\" ? \"guide\" : \"learner\",\n          messages: [],\n          last_message_at: new Date().toISOString()\n        };\n        const {\n          data,\n          error\n        } = await supabase.from(\"chat_conversations\").insert(newChat).select().single();\n        if (error) throw error;\n        const {\n          data: participantData,\n          error: participantError\n        } = await supabase.from(user.role === \"learner\" ? \"guidesDB\" : \"learnersDB\").select(\"name, image\").eq(\"id\", otherParticipantId).single();\n        if (participantError) throw participantError;\n        const updatedChat = {\n          ...data,\n          otherParticipantName: participantData.name,\n          otherParticipantImage: participantData.image,\n          otherParticipantId: otherParticipantId\n        };\n        setChats(prevChats => [updatedChat, ...prevChats]);\n        setActiveChat(data.id);\n        navigate(`/chats/${data.id}`, {\n          replace: true\n        });\n      } catch (error) {\n        console.error(\"Error creating new chat:\", error);\n        Swal.fire(\"Error\", \"Failed to create new chat. Please try again.\", \"error\");\n      }\n    }\n    if (isMobileView) {\n      setShowChatWindow(true);\n    }\n  };\n  const handleGroupClick = groupId => {\n    setActiveGroup(groupId);\n    setActiveChat(null);\n    navigate(`/chats?group=${groupId}`, {\n      replace: true\n    });\n    if (isMobileView) {\n      setShowChatWindow(true);\n    }\n  };\n  const handleBackToList = () => {\n    setShowChatWindow(false);\n    setActiveChat(null);\n    setActiveGroup(null);\n  };\n  const filteredChats = chats.filter(chat => chat.otherParticipantName.toLowerCase().includes(searchTerm.toLowerCase()));\n  const filteredGroups = groups.filter(group => group.name.toLowerCase().includes(searchTerm.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-container ${isDarkMode ? \"dark-theme\" : \"light-theme\"}`,\n    style: {\n      backgroundColor: theme.background,\n      color: theme.text\n    },\n    children: [(!isMobileView || isMobileView && !showChatWindow) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar glassmorphism\",\n      style: {\n        borderColor: theme.secondary\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-input-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(Search, {\n            className: \"search-icon\",\n            style: {\n              color: theme.text\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search chats and groups...\",\n            value: searchTerm,\n            onChange: e => setSearchTerm(e.target.value),\n            className: \"search-input\",\n            style: {\n              backgroundColor: theme.background,\n              color: theme.text\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-buttons mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn btn-cool ${activeSection === \"chats\" ? \"btn-primary\" : \"btn-outline-primary\"} me-2`,\n            onClick: () => setActiveSection(\"chats\"),\n            style: {\n              backgroundColor: activeSection === \"chats\" ? theme.primary : \"transparent\",\n              color: theme.text\n            },\n            children: [/*#__PURE__*/_jsxDEV(MessageCircle, {\n              size: 18,\n              className: \"me-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this), \"Chats\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn btn-cool ${activeSection === \"groups\" ? \"btn-primary\" : \"btn-outline-primary\"}`,\n            onClick: () => setActiveSection(\"groups\"),\n            style: {\n              backgroundColor: activeSection === \"groups\" ? theme.primary : \"transparent\",\n              color: theme.text\n            },\n            children: [/*#__PURE__*/_jsxDEV(Users, {\n              size: 18,\n              className: \"me-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this), \"Groups\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channels-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: activeSection === \"chats\" ? \"CHATS\" : \"GROUPS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-sm btn-outline-secondary rounded-circle\",\n            style: {\n              color: theme.text,\n              borderColor: theme.secondary\n            },\n            children: /*#__PURE__*/_jsxDEV(Plus, {\n              size: 16\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"channel-list\",\n          children: (activeSection === \"chats\" ? filteredChats : filteredGroups).map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `channel-item ${item.id === (activeSection === \"chats\" ? activeChat : activeGroup) ? \"active\" : \"\"}`,\n            onClick: () => activeSection === \"chats\" ? handleChatClick(item.otherParticipantId, item.otherParticipantUsername) : handleGroupClick(item.id),\n            style: {\n              backgroundColor: item.id === (activeSection === \"chats\" ? activeChat : activeGroup) ? theme.accent : \"transparent\",\n              color: theme.text\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.image ? `data:image/jpeg;base64,${item.image}` : \"/placeholder.svg\",\n              alt: item.name || item.otherParticipantName,\n              className: \"avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"channel-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"channel-name\",\n                children: item.name || item.otherParticipantName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"last-message\",\n                children: item.lastMessage || item.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 19\n            }, this), activeSection === \"chats\" && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"last-message-time\",\n              children: new Date(item.lastMessageTime).toLocaleTimeString([], {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 21\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this), (!isMobileView || isMobileView && showChatWindow) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-main\",\n      children: [(activeChat || activeGroup) && /*#__PURE__*/_jsxDEV(ChatWindow, {\n        recipientId: activeChat || activeGroup,\n        isMobileView: isMobileView,\n        isDarkMode: isDarkMode,\n        isGroupChat: activeSection === \"groups\",\n        onBack: handleBackToList\n      }, activeChat || activeGroup, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }, this), !activeChat && !activeGroup && !isMobileView && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-placeholder glassmorphism\",\n        style: {\n          backgroundColor: theme.background,\n          color: theme.text\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"gradient-text\",\n          children: \"Select a chat or group to start messaging\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatsList, \"awxOrNB4ugBL722clMt50goR05Y=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = ChatsList;\nexport default ChatsList;\nvar _c;\n$RefreshReg$(_c, \"ChatsList\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigate","useParams","useLocation","supabase","UserContext","ThemeContext","Swal","Search","MessageCircle","Users","Plus","ArrowLeft","ChatWindow","jsxDEV","_jsxDEV","ChatsList","_s","chats","setChats","groups","setGroups","activeChat","setActiveChat","activeGroup","setActiveGroup","searchTerm","setSearchTerm","activeSection","setActiveSection","isMobileView","setIsMobileView","window","innerWidth","showChatWindow","setShowChatWindow","user","isDarkMode","theme","navigate","id","location","handleResize","addEventListener","removeEventListener","state","fetchChats","fetchGroups","data","error","from","select","or","order","ascending","chatsWithDetails","Promise","all","map","chat","otherParticipantId","participant1_id","participant2_id","otherParticipantType","participant2_type","participant1_type","otherParticipantUsername","participant2_username","participant1_username","userData","userError","eq","single","lastMessage","messages","length","otherParticipantName","name","otherParticipantImage","image","message","lastMessageTime","created_at","last_message_at","console","fire","userGroups","filter","group","members","includes","handleChatClick","conversationId","role","username","existingChat","find","replace","newChat","Date","toISOString","insert","participantData","participantError","updatedChat","prevChats","handleGroupClick","groupId","handleBackToList","filteredChats","toLowerCase","filteredGroups","className","style","backgroundColor","background","color","text","children","borderColor","secondary","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","primary","size","item","accent","src","alt","description","toLocaleTimeString","hour","minute","recipientId","isGroupChat","onBack","_c","$RefreshReg$"],"sources":["D:/SAI DT/Z444/Z444pro/src/components/ChatsList.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\"\r\nimport { useNavigate, useParams, useLocation } from \"react-router-dom\"\r\nimport { supabase } from \"../supabase\"\r\nimport { UserContext } from \"../contexts/UserContext\"\r\nimport { ThemeContext } from \"../contexts/ThemeContext\"\r\nimport Swal from \"sweetalert2\"\r\nimport { Search, MessageCircle, Users, Plus, ArrowLeft } from \"lucide-react\"\r\nimport \"../styles/ChatsList.css\"\r\nimport ChatWindow from \"./ChatWindow\"\r\n\r\nfunction ChatsList() {\r\n  const [chats, setChats] = useState([])\r\n  const [groups, setGroups] = useState([])\r\n  const [activeChat, setActiveChat] = useState(null)\r\n  const [activeGroup, setActiveGroup] = useState(null)\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [activeSection, setActiveSection] = useState(\"chats\")\r\n  const [isMobileView, setIsMobileView] = useState(window.innerWidth <= 768)\r\n  const [showChatWindow, setShowChatWindow] = useState(false)\r\n  const { user } = useContext(UserContext)\r\n  const { isDarkMode, theme } = useContext(ThemeContext)\r\n  const navigate = useNavigate()\r\n  const { id } = useParams()\r\n  const location = useLocation()\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsMobileView(window.innerWidth <= 768)\r\n    }\r\n    window.addEventListener(\"resize\", handleResize)\r\n    return () => window.removeEventListener(\"resize\", handleResize)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (location.state && location.state.activeGroup) {\r\n      setActiveGroup(location.state.activeGroup)\r\n      setActiveSection(\"groups\")\r\n    }\r\n  }, [location])\r\n\r\n  useEffect(() => {\r\n    fetchChats()\r\n    fetchGroups()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      setActiveChat(id)\r\n    }\r\n  }, [id])\r\n\r\n  async function fetchChats() {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"chat_conversations\")\r\n        .select(\"*\")\r\n        .or(`participant1_id.eq.${user.id},participant2_id.eq.${user.id}`)\r\n        .order(\"last_message_at\", { ascending: false })\r\n\r\n      if (error) throw error\r\n\r\n      const chatsWithDetails = await Promise.all(\r\n        data.map(async (chat) => {\r\n          const otherParticipantId = chat.participant1_id === user.id ? chat.participant2_id : chat.participant1_id\r\n          const otherParticipantType =\r\n            chat.participant1_id === user.id ? chat.participant2_type : chat.participant1_type\r\n          const otherParticipantUsername =\r\n            chat.participant1_id === user.id ? chat.participant2_username : chat.participant1_username\r\n\r\n          const { data: userData, error: userError } = await supabase\r\n            .from(otherParticipantType === \"learner\" ? \"learnersDB\" : \"guidesDB\")\r\n            .select(\"name, image\")\r\n            .eq(\"id\", otherParticipantId)\r\n            .single()\r\n\r\n          if (userError) throw userError\r\n\r\n          const lastMessage = chat.messages[chat.messages.length - 1]\r\n\r\n          return {\r\n            ...chat,\r\n            otherParticipantName: userData.name,\r\n            otherParticipantImage: userData.image,\r\n            otherParticipantId,\r\n            otherParticipantUsername,\r\n            lastMessage: lastMessage ? lastMessage.message : \"\",\r\n            lastMessageTime: lastMessage ? lastMessage.created_at : chat.last_message_at,\r\n          }\r\n        }),\r\n      )\r\n\r\n      setChats(chatsWithDetails)\r\n    } catch (error) {\r\n      console.error(\"Error fetching chats:\", error)\r\n      Swal.fire(\"Error\", \"Failed to fetch chats. Please try again later.\", \"error\")\r\n    }\r\n  }\r\n\r\n  async function fetchGroups() {\r\n    try {\r\n      const { data, error } = await supabase.from(\"groups\").select(\"*\").order(\"created_at\", { ascending: false })\r\n\r\n      if (error) throw error\r\n\r\n      const userGroups = data.filter((group) => group.members.includes(user.id))\r\n      setGroups(userGroups)\r\n    } catch (error) {\r\n      console.error(\"Error fetching groups:\", error)\r\n      Swal.fire(\"Error\", \"Failed to fetch groups. Please try again later.\", \"error\")\r\n    }\r\n  }\r\n\r\n  const handleChatClick = async (otherParticipantId, otherParticipantUsername) => {\r\n    const conversationId =\r\n      user.role === \"learner\"\r\n        ? `${user.username}-${otherParticipantUsername}`\r\n        : `${otherParticipantUsername}-${user.username}`\r\n\r\n    const existingChat = chats.find((chat) => chat.id === conversationId)\r\n\r\n    if (existingChat) {\r\n      setActiveChat(existingChat.id)\r\n      navigate(`/chats/${existingChat.id}`, { replace: true })\r\n    } else {\r\n      try {\r\n        const newChat = {\r\n          id: conversationId,\r\n          participant1_id: user.id,\r\n          participant2_id: otherParticipantId,\r\n          participant1_username: user.username,\r\n          participant2_username: otherParticipantUsername,\r\n          participant1_type: user.role,\r\n          participant2_type: user.role === \"learner\" ? \"guide\" : \"learner\",\r\n          messages: [],\r\n          last_message_at: new Date().toISOString(),\r\n        }\r\n\r\n        const { data, error } = await supabase.from(\"chat_conversations\").insert(newChat).select().single()\r\n\r\n        if (error) throw error\r\n\r\n        const { data: participantData, error: participantError } = await supabase\r\n          .from(user.role === \"learner\" ? \"guidesDB\" : \"learnersDB\")\r\n          .select(\"name, image\")\r\n          .eq(\"id\", otherParticipantId)\r\n          .single()\r\n\r\n        if (participantError) throw participantError\r\n\r\n        const updatedChat = {\r\n          ...data,\r\n          otherParticipantName: participantData.name,\r\n          otherParticipantImage: participantData.image,\r\n          otherParticipantId: otherParticipantId,\r\n        }\r\n\r\n        setChats((prevChats) => [updatedChat, ...prevChats])\r\n        setActiveChat(data.id)\r\n        navigate(`/chats/${data.id}`, { replace: true })\r\n      } catch (error) {\r\n        console.error(\"Error creating new chat:\", error)\r\n        Swal.fire(\"Error\", \"Failed to create new chat. Please try again.\", \"error\")\r\n      }\r\n    }\r\n    if (isMobileView) {\r\n      setShowChatWindow(true)\r\n    }\r\n  }\r\n\r\n  const handleGroupClick = (groupId) => {\r\n    setActiveGroup(groupId)\r\n    setActiveChat(null)\r\n    navigate(`/chats?group=${groupId}`, { replace: true })\r\n    if (isMobileView) {\r\n      setShowChatWindow(true)\r\n    }\r\n  }\r\n\r\n  const handleBackToList = () => {\r\n    setShowChatWindow(false)\r\n    setActiveChat(null)\r\n    setActiveGroup(null)\r\n  }\r\n\r\n  const filteredChats = chats.filter((chat) =>\r\n    chat.otherParticipantName.toLowerCase().includes(searchTerm.toLowerCase()),\r\n  )\r\n\r\n  const filteredGroups = groups.filter((group) => group.name.toLowerCase().includes(searchTerm.toLowerCase()))\r\n\r\n  return (\r\n    <div\r\n      className={`chat-container ${isDarkMode ? \"dark-theme\" : \"light-theme\"}`}\r\n      style={{ backgroundColor: theme.background, color: theme.text }}\r\n    >\r\n      {(!isMobileView || (isMobileView && !showChatWindow)) && (\r\n        <div className=\"sidebar glassmorphism\" style={{ borderColor: theme.secondary }}>\r\n          <div className=\"search-container\">\r\n            <div className=\"search-input-wrapper\">\r\n              <Search className=\"search-icon\" style={{ color: theme.text }} />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search chats and groups...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"search-input\"\r\n                style={{ backgroundColor: theme.background, color: theme.text }}\r\n              />\r\n            </div>\r\n            <div className=\"section-buttons mb-3\">\r\n              <button\r\n                className={`btn btn-cool ${activeSection === \"chats\" ? \"btn-primary\" : \"btn-outline-primary\"} me-2`}\r\n                onClick={() => setActiveSection(\"chats\")}\r\n                style={{\r\n                  backgroundColor: activeSection === \"chats\" ? theme.primary : \"transparent\",\r\n                  color: theme.text,\r\n                }}\r\n              >\r\n                <MessageCircle size={18} className=\"me-2\" />\r\n                Chats\r\n              </button>\r\n              <button\r\n                className={`btn btn-cool ${activeSection === \"groups\" ? \"btn-primary\" : \"btn-outline-primary\"}`}\r\n                onClick={() => setActiveSection(\"groups\")}\r\n                style={{\r\n                  backgroundColor: activeSection === \"groups\" ? theme.primary : \"transparent\",\r\n                  color: theme.text,\r\n                }}\r\n              >\r\n                <Users size={18} className=\"me-2\" />\r\n                Groups\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"channels-section\">\r\n            <div className=\"section-header\">\r\n              <span>{activeSection === \"chats\" ? \"CHATS\" : \"GROUPS\"}</span>\r\n              <button\r\n                className=\"btn btn-sm btn-outline-secondary rounded-circle\"\r\n                style={{ color: theme.text, borderColor: theme.secondary }}\r\n              >\r\n                <Plus size={16} />\r\n              </button>\r\n            </div>\r\n            <ul className=\"channel-list\">\r\n              {(activeSection === \"chats\" ? filteredChats : filteredGroups).map((item) => (\r\n                <li\r\n                  key={item.id}\r\n                  className={`channel-item ${item.id === (activeSection === \"chats\" ? activeChat : activeGroup) ? \"active\" : \"\"}`}\r\n                  onClick={() =>\r\n                    activeSection === \"chats\"\r\n                      ? handleChatClick(item.otherParticipantId, item.otherParticipantUsername)\r\n                      : handleGroupClick(item.id)\r\n                  }\r\n                  style={{\r\n                    backgroundColor:\r\n                      item.id === (activeSection === \"chats\" ? activeChat : activeGroup) ? theme.accent : \"transparent\",\r\n                    color: theme.text,\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={item.image ? `data:image/jpeg;base64,${item.image}` : \"/placeholder.svg\"}\r\n                    alt={item.name || item.otherParticipantName}\r\n                    className=\"avatar\"\r\n                  />\r\n                  <div className=\"channel-info\">\r\n                    <span className=\"channel-name\">{item.name || item.otherParticipantName}</span>\r\n                    <span className=\"last-message\">{item.lastMessage || item.description}</span>\r\n                  </div>\r\n                  {activeSection === \"chats\" && (\r\n                    <span className=\"last-message-time\">\r\n                      {new Date(item.lastMessageTime).toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n                    </span>\r\n                  )}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {(!isMobileView || (isMobileView && showChatWindow)) && (\r\n        <div className=\"chat-main\">\r\n          {(activeChat || activeGroup) && (\r\n            <ChatWindow\r\n              key={activeChat || activeGroup}\r\n              recipientId={activeChat || activeGroup}\r\n              isMobileView={isMobileView}\r\n              isDarkMode={isDarkMode}\r\n              isGroupChat={activeSection === \"groups\"}\r\n              onBack={handleBackToList}\r\n            />\r\n          )}\r\n          {!activeChat && !activeGroup && !isMobileView && (\r\n            <div\r\n              className=\"chat-placeholder glassmorphism\"\r\n              style={{ backgroundColor: theme.background, color: theme.text }}\r\n            >\r\n              <h2 className=\"gradient-text\">Select a chat or group to start messaging</h2>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatsList\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}