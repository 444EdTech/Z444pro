{"ast":null,"code":"var _jsxFileName = \"D:\\\\SAI DT\\\\Z444\\\\Z444pro\\\\src\\\\components\\\\ChatWindow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useRef } from \"react\";\nimport { supabase } from \"../supabase\";\nimport { UserContext } from \"../contexts/UserContext\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport Swal from \"sweetalert2\";\nimport { User, Send, Paperclip, ArrowLeft } from \"lucide-react\";\nimport ProfilePopup from \"./ProfilePopup\";\nimport \"../styles/ChatWindow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatWindow({\n  recipientId,\n  isMobileView,\n  isDarkMode,\n  isGroupChat = false,\n  onBack\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [recipient, setRecipient] = useState(null);\n  const {\n    user\n  } = useContext(UserContext);\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const chatEndRef = useRef(null);\n  const chatMessagesRef = useRef(null);\n  const [showProfilePopup, setShowProfilePopup] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const typingTimeoutRef = useRef(null);\n  useEffect(() => {\n    if (recipientId) {\n      fetchRecipient();\n    }\n  }, [recipientId]);\n  useEffect(() => {\n    if (recipient) {\n      fetchMessages();\n      const interval = setInterval(fetchMessages, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [recipient]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]); // Correct dependency\n\n  useEffect(() => {\n    if (messages.length > 0 && !isGroupChat) {\n      markMessagesAsSeen();\n    }\n  }, [messages, isGroupChat]);\n  function scrollToBottom() {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }\n  async function fetchRecipient() {\n    try {\n      if (isGroupChat) {\n        const {\n          data,\n          error\n        } = await supabase.from(\"groups\").select(\"*\").eq(\"id\", recipientId).single();\n        if (error) throw error;\n        setRecipient(data);\n      } else {\n        const otherUsername = recipientId.split(\"-\").find(username => username !== user.username);\n        const {\n          data,\n          error\n        } = await supabase.from(user.role === \"learner\" ? \"guidesDB\" : \"learnersDB\").select(\"*\").eq(\"user_name\", otherUsername).single();\n        if (error) throw error;\n        setRecipient(data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching recipient:\", error);\n      Swal.fire(\"Error\", \"Failed to fetch recipient details. Please try again later.\", \"error\");\n    }\n  }\n  async function fetchMessages() {\n    try {\n      if (isGroupChat) {\n        const {\n          data,\n          error\n        } = await supabase.from(\"group_chats\").select(\"*\").eq(\"group_id\", recipientId).order(\"created_at\", {\n          ascending: true\n        });\n        if (error) throw error;\n        setMessages(data || []);\n      } else {\n        const {\n          data,\n          error\n        } = await supabase.from(\"chat_conversations\").select(\"*\").eq(\"id\", recipientId).single();\n        if (error) {\n          if (error.code === \"PGRST116\") {\n            // No matching row found, which means it's a new chat\n            setMessages([]);\n            return;\n          }\n          throw error;\n        }\n        setMessages(data.messages || []);\n      }\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      Swal.fire(\"Error\", \"Failed to fetch messages. Please try again later.\", \"error\");\n    }\n  }\n  async function sendMessage(e) {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n    try {\n      if (isGroupChat) {\n        const {\n          data,\n          error\n        } = await supabase.from(\"group_chats\").insert({\n          group_id: recipientId,\n          sender_id: user.id,\n          sender_name: user.name,\n          message: newMessage\n        });\n        if (error) throw error;\n      } else {\n        const newMessageObj = {\n          id: Date.now(),\n          sender_id: user.id,\n          sender_username: user.username,\n          sender_name: user.name,\n          message: newMessage,\n          created_at: new Date().toISOString(),\n          seen: false\n        };\n        const {\n          data: existingConversation,\n          error: fetchError\n        } = await supabase.from(\"chat_conversations\").select(\"messages\").eq(\"id\", recipientId).single();\n        if (fetchError && fetchError.code !== \"PGRST116\") throw fetchError;\n        const updatedMessages = existingConversation ? [...existingConversation.messages, newMessageObj] : [newMessageObj];\n        const {\n          data,\n          error\n        } = await supabase.from(\"chat_conversations\").upsert({\n          id: recipientId,\n          participant1_id: user.id,\n          participant2_id: recipient.id,\n          participant1_username: user.username,\n          participant2_username: recipient.user_name,\n          participant1_type: user.role,\n          participant2_type: user.role === \"learner\" ? \"guide\" : \"learner\",\n          messages: updatedMessages,\n          last_message_at: new Date().toISOString()\n        });\n        if (error) throw error;\n      }\n      setNewMessage(\"\");\n      fetchMessages();\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      Swal.fire(\"Error\", \"Failed to send message. Please try again.\", \"error\");\n    }\n  }\n  async function markMessagesAsSeen() {\n    if (isGroupChat || !messages.length) return;\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage.sender_id !== user.id && !lastMessage.seen) {\n      try {\n        const updatedMessages = messages.map(msg => msg.sender_id !== user.id ? {\n          ...msg,\n          seen: true\n        } : msg);\n        const {\n          data,\n          error\n        } = await supabase.from(\"chat_conversations\").update({\n          messages: updatedMessages\n        }).eq(\"id\", recipientId);\n        if (error) throw error;\n        setMessages(updatedMessages);\n      } catch (error) {\n        console.error(\"Error marking messages as seen:\", error);\n      }\n    }\n  }\n  function parseMessage(message) {\n    return message.split(\"\\n\").map((line, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [line, index !== message.split(\"\\n\").length - 1 && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 54\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this));\n  }\n  const handleTyping = () => {\n    setIsTyping(true);\n    clearTimeout(typingTimeoutRef.current);\n    typingTimeoutRef.current = setTimeout(() => {\n      setIsTyping(false);\n    }, 1000);\n  };\n  if (!recipient) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-window glassmorphism ${isDarkMode ? \"dark-theme\" : \"light-theme\"}`,\n    style: {\n      backgroundColor: theme.background,\n      color: theme.text\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      style: {\n        borderColor: theme.secondary\n      },\n      children: [isMobileView && /*#__PURE__*/_jsxDEV(ArrowLeft, {\n        className: \"back-arrow\",\n        onClick: onBack,\n        style: {\n          cursor: \"pointer\",\n          marginRight: \"1rem\",\n          color: theme.text\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-channel\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: recipient.image ? `data:image/jpeg;base64,${recipient.image}` : \"/placeholder.svg\",\n          alt: recipient.name,\n          className: \"recipient-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recipient-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"fw-semibold\",\n            children: recipient === null || recipient === void 0 ? void 0 : recipient.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"typing-indicator\",\n            children: [\"typing\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"loading-dots\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), !isGroupChat && /*#__PURE__*/_jsxDEV(User, {\n          className: \"profile-icon\",\n          onClick: () => setShowProfilePopup(true),\n          style: {\n            cursor: \"pointer\",\n            marginLeft: \"auto\",\n            color: theme.text\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      ref: chatMessagesRef,\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender_id === user.id ? \"sent\" : \"received\"}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          style: {\n            backgroundColor: message.sender_id === user.id ? theme.primary : theme.accent\n          },\n          children: [isGroupChat && message.sender_id !== user.id && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"sender-name\",\n            children: message.sender_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 64\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message-text\",\n            style: {\n              color: message.sender_id === user.id ? theme.background : theme.text\n            },\n            children: parseMessage(message.message)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"message-time\",\n              style: {\n                color: message.sender_id === user.id ? theme.background : theme.text\n              },\n              children: new Date(message.created_at).toLocaleTimeString([], {\n                hour: \"2-digit\",\n                minute: \"2-digit\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this), !isGroupChat && message.sender_id === user.id && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: message.seen ? \"seen\" : \"unseen\",\n              style: {\n                color: message.sender_id === user.id ? theme.background : theme.text\n              },\n              children: message.seen ? \"✓✓\" : \"✓\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      style: {\n        borderColor: theme.secondary\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"message-input\",\n          placeholder: `Message ${recipient === null || recipient === void 0 ? void 0 : recipient.name}`,\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          onKeyDown: handleTyping,\n          style: {\n            backgroundColor: theme.background,\n            color: theme.text\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-button\",\n          style: {\n            color: theme.primary\n          },\n          children: /*#__PURE__*/_jsxDEV(Send, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), !isGroupChat && /*#__PURE__*/_jsxDEV(ProfilePopup, {\n      show: showProfilePopup,\n      onHide: () => setShowProfilePopup(false),\n      userData: recipient,\n      theme: theme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatWindow, \"GZ6GDf46ISwRS6CTRivmiAOZSqQ=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","supabase","UserContext","ThemeContext","Swal","User","Send","Paperclip","ArrowLeft","ProfilePopup","jsxDEV","_jsxDEV","ChatWindow","recipientId","isMobileView","isDarkMode","isGroupChat","onBack","_s","messages","setMessages","newMessage","setNewMessage","recipient","setRecipient","user","theme","chatEndRef","chatMessagesRef","showProfilePopup","setShowProfilePopup","isTyping","setIsTyping","typingTimeoutRef","fetchRecipient","fetchMessages","interval","setInterval","clearInterval","scrollToBottom","length","markMessagesAsSeen","_chatEndRef$current","current","scrollIntoView","behavior","data","error","from","select","eq","single","otherUsername","split","find","username","role","console","fire","order","ascending","code","sendMessage","e","preventDefault","trim","insert","group_id","sender_id","id","sender_name","name","message","newMessageObj","Date","now","sender_username","created_at","toISOString","seen","existingConversation","fetchError","updatedMessages","upsert","participant1_id","participant2_id","participant1_username","participant2_username","user_name","participant1_type","participant2_type","last_message_at","lastMessage","map","msg","update","parseMessage","line","index","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","handleTyping","clearTimeout","setTimeout","className","style","backgroundColor","background","color","text","borderColor","secondary","onClick","cursor","marginRight","src","image","alt","marginLeft","ref","primary","accent","toLocaleTimeString","hour","minute","onSubmit","type","placeholder","value","onChange","target","onKeyDown","size","show","onHide","userData","_c","$RefreshReg$"],"sources":["D:/SAI DT/Z444/Z444pro/src/components/ChatWindow.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef } from \"react\" \r\nimport { supabase } from \"../supabase\"\r\nimport { UserContext } from \"../contexts/UserContext\"\r\nimport { ThemeContext } from \"../contexts/ThemeContext\"\r\nimport Swal from \"sweetalert2\"\r\nimport { User, Send, Paperclip, ArrowLeft } from \"lucide-react\"\r\nimport ProfilePopup from \"./ProfilePopup\"\r\nimport \"../styles/ChatWindow.css\"\r\n\r\nfunction ChatWindow({ recipientId, isMobileView, isDarkMode, isGroupChat = false, onBack }) {\r\n  const [messages, setMessages] = useState([])\r\n  const [newMessage, setNewMessage] = useState(\"\")\r\n  const [recipient, setRecipient] = useState(null)\r\n  const { user } = useContext(UserContext)\r\n  const { theme } = useContext(ThemeContext)\r\n  const chatEndRef = useRef(null)\r\n  const chatMessagesRef = useRef(null)\r\n  const [showProfilePopup, setShowProfilePopup] = useState(false)\r\n  const [isTyping, setIsTyping] = useState(false)\r\n  const typingTimeoutRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (recipientId) {\r\n      fetchRecipient()\r\n    }\r\n  }, [recipientId])\r\n\r\n  useEffect(() => {\r\n    if (recipient) {\r\n      fetchMessages()\r\n      const interval = setInterval(fetchMessages, 5000)\r\n      return () => clearInterval(interval)\r\n    }\r\n  }, [recipient])\r\n\r\n  useEffect(() => {\r\n    scrollToBottom()\r\n  }, [messages]) // Correct dependency\r\n  \r\n\r\n  useEffect(() => {\r\n    if (messages.length > 0 && !isGroupChat) {\r\n      markMessagesAsSeen()\r\n    }\r\n  }, [messages, isGroupChat])\r\n\r\n  function scrollToBottom() {\r\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n  }\r\n\r\n  async function fetchRecipient() {\r\n    try {\r\n      if (isGroupChat) {\r\n        const { data, error } = await supabase.from(\"groups\").select(\"*\").eq(\"id\", recipientId).single()\r\n\r\n        if (error) throw error\r\n        setRecipient(data)\r\n      } else {\r\n        const otherUsername = recipientId.split(\"-\").find((username) => username !== user.username)\r\n        const { data, error } = await supabase\r\n          .from(user.role === \"learner\" ? \"guidesDB\" : \"learnersDB\")\r\n          .select(\"*\")\r\n          .eq(\"user_name\", otherUsername)\r\n          .single()\r\n\r\n        if (error) throw error\r\n        setRecipient(data)\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching recipient:\", error)\r\n      Swal.fire(\"Error\", \"Failed to fetch recipient details. Please try again later.\", \"error\")\r\n    }\r\n  }\r\n\r\n  async function fetchMessages() {\r\n    try {\r\n      if (isGroupChat) {\r\n        const { data, error } = await supabase\r\n          .from(\"group_chats\")\r\n          .select(\"*\")\r\n          .eq(\"group_id\", recipientId)\r\n          .order(\"created_at\", { ascending: true })\r\n\r\n        if (error) throw error\r\n        setMessages(data || [])\r\n      } else {\r\n        const { data, error } = await supabase.from(\"chat_conversations\").select(\"*\").eq(\"id\", recipientId).single()\r\n\r\n        if (error) {\r\n          if (error.code === \"PGRST116\") {\r\n            // No matching row found, which means it's a new chat\r\n            setMessages([])\r\n            return\r\n          }\r\n          throw error\r\n        }\r\n        setMessages(data.messages || [])\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching messages:\", error)\r\n      Swal.fire(\"Error\", \"Failed to fetch messages. Please try again later.\", \"error\")\r\n    }\r\n  }\r\n\r\n  async function sendMessage(e) {\r\n    e.preventDefault()\r\n    if (!newMessage.trim()) return\r\n\r\n    try {\r\n      if (isGroupChat) {\r\n        const { data, error } = await supabase.from(\"group_chats\").insert({\r\n          group_id: recipientId,\r\n          sender_id: user.id,\r\n          sender_name: user.name,\r\n          message: newMessage,\r\n        })\r\n\r\n        if (error) throw error\r\n      } else {\r\n        const newMessageObj = {\r\n          id: Date.now(),\r\n          sender_id: user.id,\r\n          sender_username: user.username,\r\n          sender_name: user.name,\r\n          message: newMessage,\r\n          created_at: new Date().toISOString(),\r\n          seen: false,\r\n        }\r\n\r\n        const { data: existingConversation, error: fetchError } = await supabase\r\n          .from(\"chat_conversations\")\r\n          .select(\"messages\")\r\n          .eq(\"id\", recipientId)\r\n          .single()\r\n\r\n        if (fetchError && fetchError.code !== \"PGRST116\") throw fetchError\r\n\r\n        const updatedMessages = existingConversation\r\n          ? [...existingConversation.messages, newMessageObj]\r\n          : [newMessageObj]\r\n\r\n        const { data, error } = await supabase.from(\"chat_conversations\").upsert({\r\n          id: recipientId,\r\n          participant1_id: user.id,\r\n          participant2_id: recipient.id,\r\n          participant1_username: user.username,\r\n          participant2_username: recipient.user_name,\r\n          participant1_type: user.role,\r\n          participant2_type: user.role === \"learner\" ? \"guide\" : \"learner\",\r\n          messages: updatedMessages,\r\n          last_message_at: new Date().toISOString(),\r\n        })\r\n\r\n        if (error) throw error\r\n      }\r\n\r\n      setNewMessage(\"\")\r\n      fetchMessages()\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error)\r\n      Swal.fire(\"Error\", \"Failed to send message. Please try again.\", \"error\")\r\n    }\r\n  }\r\n\r\n  async function markMessagesAsSeen() {\r\n    if (isGroupChat || !messages.length) return\r\n\r\n    const lastMessage = messages[messages.length - 1]\r\n    if (lastMessage.sender_id !== user.id && !lastMessage.seen) {\r\n      try {\r\n        const updatedMessages = messages.map((msg) => (msg.sender_id !== user.id ? { ...msg, seen: true } : msg))\r\n\r\n        const { data, error } = await supabase\r\n          .from(\"chat_conversations\")\r\n          .update({ messages: updatedMessages })\r\n          .eq(\"id\", recipientId)\r\n\r\n        if (error) throw error\r\n\r\n        setMessages(updatedMessages)\r\n      } catch (error) {\r\n        console.error(\"Error marking messages as seen:\", error)\r\n      }\r\n    }\r\n  }\r\n\r\n  function parseMessage(message) {\r\n    return message.split(\"\\n\").map((line, index) => (\r\n      <React.Fragment key={index}>\r\n        {line}\r\n        {index !== message.split(\"\\n\").length - 1 && <br />}\r\n      </React.Fragment>\r\n    ))\r\n  }\r\n\r\n  const handleTyping = () => {\r\n    setIsTyping(true)\r\n    clearTimeout(typingTimeoutRef.current)\r\n    typingTimeoutRef.current = setTimeout(() => {\r\n      setIsTyping(false)\r\n    }, 1000)\r\n  }\r\n\r\n  if (!recipient) {\r\n    return <div>Loading...</div>\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`chat-window glassmorphism ${isDarkMode ? \"dark-theme\" : \"light-theme\"}`}\r\n      style={{ backgroundColor: theme.background, color: theme.text }}\r\n    >\r\n      <div className=\"chat-header\" style={{ borderColor: theme.secondary }}>\r\n        {isMobileView && (\r\n          <ArrowLeft\r\n            className=\"back-arrow\"\r\n            onClick={onBack}\r\n            style={{ cursor: \"pointer\", marginRight: \"1rem\", color: theme.text }}\r\n          />\r\n        )}\r\n        <div className=\"header-channel\">\r\n          <img\r\n            src={recipient.image ? `data:image/jpeg;base64,${recipient.image}` : \"/placeholder.svg\"}\r\n            alt={recipient.name}\r\n            className=\"recipient-avatar\"\r\n          />\r\n          <div className=\"recipient-info\">\r\n            <span className=\"fw-semibold\">{recipient?.name}</span>\r\n            {isTyping && (\r\n              <span className=\"typing-indicator\">\r\n                typing<span className=\"loading-dots\"></span>\r\n              </span>\r\n            )}\r\n          </div>\r\n          {!isGroupChat && (\r\n            <User\r\n              className=\"profile-icon\"\r\n              onClick={() => setShowProfilePopup(true)}\r\n              style={{ cursor: \"pointer\", marginLeft: \"auto\", color: theme.text }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"chat-messages\" ref={chatMessagesRef}>\r\n        {messages.map((message) => (\r\n          <div key={message.id} className={`message ${message.sender_id === user.id ? \"sent\" : \"received\"}`}>\r\n            <div\r\n              className=\"message-content\"\r\n              style={{ backgroundColor: message.sender_id === user.id ? theme.primary : theme.accent }}\r\n            >\r\n              {isGroupChat && message.sender_id !== user.id && <p className=\"sender-name\">{message.sender_name}</p>}\r\n              <p\r\n                className=\"message-text\"\r\n                style={{ color: message.sender_id === user.id ? theme.background : theme.text }}\r\n              >\r\n                {parseMessage(message.message)}\r\n              </p>\r\n              <div className=\"message-info\">\r\n                <span\r\n                  className=\"message-time\"\r\n                  style={{ color: message.sender_id === user.id ? theme.background : theme.text }}\r\n                >\r\n                  {new Date(message.created_at).toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n                </span>\r\n                {!isGroupChat && message.sender_id === user.id && (\r\n                  <span\r\n                    className={message.seen ? \"seen\" : \"unseen\"}\r\n                    style={{ color: message.sender_id === user.id ? theme.background : theme.text }}\r\n                  >\r\n                    {message.seen ? \"✓✓\" : \"✓\"}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div ref={chatEndRef} />\r\n      </div>\r\n      <div className=\"chat-input\" style={{ borderColor: theme.secondary }}>\r\n        <form onSubmit={sendMessage} className=\"input-container\">\r\n          {/* <button type=\"button\" className=\"attach-button\" style={{ color: theme.text }}>\r\n            <Paperclip size={20} />\r\n          </button> */}\r\n          <input\r\n            type=\"text\"\r\n            className=\"message-input\"\r\n            placeholder={`Message ${recipient?.name}`}\r\n            value={newMessage}\r\n            onChange={(e) => setNewMessage(e.target.value)}\r\n            onKeyDown={handleTyping}\r\n            style={{ backgroundColor: theme.background, color: theme.text }}\r\n          />\r\n          <button type=\"submit\" className=\"send-button\" style={{ color: theme.primary }}>\r\n            <Send size={20} />\r\n          </button>\r\n        </form>\r\n      </div>\r\n      {!isGroupChat && (\r\n        <ProfilePopup\r\n          show={showProfilePopup}\r\n          onHide={() => setShowProfilePopup(false)}\r\n          userData={recipient}\r\n          theme={theme}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatWindow"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}